{"version":3,"sources":["components/CubePhysical.jsx","config.js","components/Plane/PlaneModel.jsx","components/Plane/Plane.jsx","hooks/useKeyboard.js","state.js","components/PlayerModel/BoundingBox.jsx","components/PlayerModel/PlayerModel.jsx","components/SkyBox/SkyBox.jsx","utils/getRandom.js","Scenes/Scene1.js","Scenes/Scene2.js","App.js","reportWebVitals.js","index.js"],"names":["CubePhysical","props","useBox","mass","position","velocity","ref","PUBLIC_ENV_URL","PlaneModel","modelRef","useRef","model","useLoader","GLTFLoader","path","rotation","Math","PI","object","scene","scale","Plane","usePlane","receiveShadow","moveFieldByKey","key","KeyW","KeyS","KeyA","KeyD","Space","$player","atom","default","BoundingBoxPhysical","offset","dims","visible","children","args","api","useRecoilValue","pPosition","useFrame","clock","set","wireframe","PlayerModel","mixer","orbitRef","useState","animState","setAnimState","moveForward","moveBackward","moveLeft","moveRight","jump","movement","setMovement","useEffect","handleKeyDown","e","m","code","handleKeyUp","document","addEventListener","removeEventListener","useKeyboard","nodes","animations","setPlayerPosition","useSetRecoilState","camera","useThree","useMemo","Object","values","forEach","obj","Mesh","assign","castShadow","action_idle","AnimationMixer","clipAction","idleIndex","action_walk","walkIndex","length","stopAllAction","delta","update","direction","Vector3","frontVector","Number","sideVector","subVectors","normalize","multiplyScalar","applyEuler","pos","newPosition","x","z","camRotation","toArray","console","log","copy","sin","cos","current","target","y","setLoop","LoopRepeat","play","up","OrbitControls","BoundingBox","imagePaths","map","img","Scene","paths","mat","THREE","load","background","environment","useSkybox","random","min","max","MainScene","intensity","color","fallback","Array","fill","ji","Scene1","Stats","Scene2","App","mode","setMode","style","width","height","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b8c93d27.chunk.js","sourcesContent":["import  { useBox } from \"@react-three/cannon\";\n\nfunction CubePhysical(props) {\n  const [ref] = useBox(() => ({ mass: 0.2, position: [0, 5, 0],velocity:[0,4,0], ...props }));\n    return (\n      <mesh ref={ref}>\n        <boxBufferGeometry />\n        <meshPhysicalMaterial />\n      </mesh>\n    );\n}\n  \nexport default CubePhysical;","export const PUBLIC_ENV_URL =\n  process.env.NODE_ENV === \"production\"\n    ? \"https://fliklab.github.io/r3f-app\"\n    : \"\";\n","import { useLoader } from \"@react-three/fiber\";\nimport { useMemo, useRef } from \"react\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nconst PlaneModel = (props) => {\n  const modelRef = useRef();\n  const model = useLoader(GLTFLoader, props.path);\n\n  return (\n    <mesh\n      ref={modelRef}\n      rotation={[Math.PI / 2, 0, 0]}\n    >\n      {/* <meshPhysicalMaterial wireframe /> */}\n      <primitive\n        object={model.scene}\n        scale={[1.5, 1.5, 1.5]}\n        position={props.position}\n      />\n         </mesh>\n  );\n};\n\nexport default PlaneModel;\n","import { usePlane } from \"@react-three/cannon\";\nimport { PUBLIC_ENV_URL } from \"../../config\";\nimport PlaneModel from \"./PlaneModel\";\n\n\nfunction Plane(props) {\n    const [ref] = usePlane(() => ({ rotation: [- Math.PI / 2, 0, 0], ...props }));\n\n    return (\n      <mesh ref={ref} receiveShadow >\n        <PlaneModel path={PUBLIC_ENV_URL + \"/assets/map2/BASKETBALL/BASKETBALL.gltf\"} position={[15,-24,13]}/>\n        <PlaneModel path={PUBLIC_ENV_URL + \"/assets/map2/BASE2/BASE.gltf\"} position={[15,-24,13]}/>\n        <PlaneModel path={PUBLIC_ENV_URL + \"/assets/map2/TEST/test.gltf\"} position={[15,-24,13]}/>\n        {/* <PlainAnimModel path=\"/assets/water/ocean_wave_test.gltf\"/> */}\n        {/* <planeBufferGeometry args={[100, 100]} /> */}\n      </mesh>\n    );\n}\n\n\nexport default Plane\n\n  \n","import { useState, useEffect } from \"react\";\n\nfunction moveFieldByKey(key) {\n  const keys = {\n    KeyW: \"moveForward\",\n    KeyS: \"moveBackward\",\n    KeyA: \"moveLeft\",\n    KeyD: \"moveRight\",\n    Space: \"jump\",\n  };\n  return keys[key];\n}\n\nexport const useKeyboard = () => {\n  const [movement, setMovement] = useState({\n    moveForward: false,\n    moveBackward: false,\n    moveLeft: false,\n    moveRight: false,\n    jump: false,\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      setMovement((m) => ({\n        ...m,\n        [moveFieldByKey(e.code)]: true,\n      }));\n    };\n    const handleKeyUp = (e) => {\n      setMovement((m) => ({\n        ...m,\n        [moveFieldByKey(e.code)]: false,\n      }));\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n    document.addEventListener(\"keyup\", handleKeyUp);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n      document.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  }, []);\n\n  return movement;\n};\n","import { atom } from 'recoil';\n\nexport const $player = atom({\n  key: 'position',\n  default: {position:[0,0,0], rotation:[0,0,0]}\n});\n\nexport const $camera = atom({\n  key: 'camera',\n  default: {position:[0,0,0], rotation:[0,0,0]}\n});\n","import { useBox } from \"@react-three/cannon\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useRecoilValue } from \"recoil\";\nimport { $player } from \"../../state\";\n\nconst BoundingBoxPhysical = ({\n  position = [0, 0, 0],\n  offset = [0, 0, 0],\n  dims = [1, 1, 1],\n  visible = false,\n  children,\n}) => {\n  const [ref, api] = useBox(() => ({ mass: 1, args: dims, position }));\n  const {position:pPosition, rotation} = useRecoilValue($player);\n\n\n  useFrame(({ clock }) => {\n    api.position.set(\n      pPosition[0],pPosition[1],pPosition[2]\n    );\n    api.rotation.set(\n      rotation[0], rotation[1], rotation[2]\n    );\n  });\n  \n\n\n  return (\n    <group ref={ref} api={api}>\n      <mesh scale={dims} visible={visible}>\n        <boxBufferGeometry />\n        <meshPhysicalMaterial wireframe />\n      </mesh>\n      <group position={offset}>{children}</group>\n    </group>\n  );\n};\n\nexport default BoundingBoxPhysical;\n","import { Box, OrbitControls } from \"@react-three/drei\";\nimport { useFrame, useLoader, useThree } from \"@react-three/fiber\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport { AnimationMixer, LoopRepeat, Mesh, Vector3 } from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { useKeyboard } from \"../../hooks/useKeyboard\";\nimport { $player } from \"../../state\";\nimport BoundingBox from \"./BoundingBox\";\n\nconst PlayerModel = (props) => {\n  const orbitRef = useRef();\n  const [animState, setAnimState] = useState(0);\n\n  const modelRef = useRef();\n  const { moveForward, moveBackward, moveLeft, moveRight } = useKeyboard();\n\n  const { path } = props;\n  const { nodes, scene, animations } = useLoader(GLTFLoader, path);\n\n  const setPlayerPosition = useSetRecoilState($player);\n\n  const { camera } = useThree();\n\n  useMemo(\n    () =>\n      Object.values(nodes).forEach(\n        (obj) =>\n          obj instanceof Mesh &&\n          Object.assign(obj, { castShadow: true, receiveShadow: true })\n      ),\n    [nodes]\n  );\n\n  let mixer;\n  mixer = new AnimationMixer(scene);\n  const action_idle = mixer.clipAction(animations[props.idleIndex ?? 0]);\n  const action_walk = mixer.clipAction(animations[props.walkIndex ?? 1]);\n  if (animations.length > 0) {\n    mixer.stopAllAction();\n  }\n\n  useFrame((scene, delta) => {\n    if (moveForward | moveBackward | moveLeft | moveRight) {\n      setAnimState(1); // 1 : walk\n    } else setAnimState(0); // 0: idle\n    mixer.update(delta);\n  });\n\n  useFrame(({ clock }) => {\n    const direction = new Vector3();\n    const frontVector = new Vector3(\n      0,\n      0,\n      Number(moveBackward) - Number(moveForward)\n    );\n    const sideVector = new Vector3(Number(moveLeft) - Number(moveRight), 0, 0);\n    direction\n      .subVectors(frontVector, sideVector)\n      .normalize()\n      .multiplyScalar(0.1)\n      .applyEuler(camera.rotation);\n\n    setPlayerPosition((pos) => {\n      const newPosition = [\n        pos.position[0] + direction.x,\n        1,\n        pos.position[2] + direction.z,\n      ];\n      const camRotation = camera.rotation.toArray();\n      console.log(camRotation);\n      camera.position.copy(\n        new Vector3(\n          newPosition[0] + 10 * Math.sin(camRotation[1]),\n          3,\n          newPosition[2] + 10 * Math.cos(camRotation[1])\n        )\n      );\n      orbitRef.current.target = new Vector3(\n        newPosition[0],\n        camera.position.y,\n        newPosition[2]\n      );\n      orbitRef.current.update();\n      return {\n        position: newPosition,\n        rotation: [0, camRotation[1] + Math.PI, 0],\n      };\n    });\n  });\n\n  useEffect(() => {\n    mixer.stopAllAction();\n    switch (animState) {\n      case 1:\n        action_walk.setLoop(LoopRepeat);\n        action_walk.play();\n        break;\n      default:\n        action_idle.setLoop(LoopRepeat);\n        action_idle.play();\n        break;\n    }\n  }, [animState, action_walk, action_idle, mixer]);\n\n  return (\n    <group ref={modelRef} up={[0, 1, 0]}>\n      <OrbitControls ref={orbitRef} />\n      <BoundingBox visible up={[0, 0, 0]} dims={[1.5, 2, 1.5]}>\n        <primitive\n          object={scene}\n          path={props.path}\n          scale={[2, 2, 2]}\n          position={[0, -1, 0]}\n        />\n        <boxBufferGeometry scale={[2, 2, 2]} />\n      </BoundingBox>\n    </group>\n  );\n};\n\nexport default PlayerModel;\n","import React, { Suspense, useEffect } from \"react\";\nimport { useThree , Canvas} from \"@react-three/fiber\";\nimport * as THREE from \"three\";\n// import { DoubleSide } from \"three\";\n\n// function Thing() {\n//   const ref = useRef<typeof Box>();\n//   useFrame(\n//     () =>\n//       ref.current && (ref.current.rotation.x = ref.current.rotation.y += 0.01)\n//   );\n//   return (\n//     <Box\n//       ref={ref}\n//       args={[1, 1, 1]}\n//       onClick={(e) => console.log(\"click\")}\n//       onPointerOver={(e) => console.log(\"hover\")}\n//       onPointerOut={(e) => console.log(\"unhover\")}\n//     >\n//       <meshNormalMaterial attach=\"material\" />\n//     </Box>\n//   );\n// }\n\n// const path = \"/assets/city-sky/\";\n// const images = ['back','front',  'top', 'bottom',  'left', 'right',]\n\n// const images = [\"nx1.jpg\", \"px2.png\",\"ny1.jpg\",\"py2.jpg\",\"pz2.png\",\"nz1.png\" ,];\n\nconst path = \"/assets/skyboxes/city/\";\nconst images = [\"px.png\",\"nx.png\", \"py.png\",\"ny.png\",\"nz.png\",\"pz.png\"];\n\n// const ext = \".png\";\n\nconst imagePaths = images.map((img) => path + img );\n\n// function Planet() {\n//   const { scene, scenes, animations, cameras, asset, materials } = useLoader(\n//     GLTFLoader,\n//     \"./Earth/CHAHIN_EARTH.gltf\"\n//   );\n\n//   const ref = useRef();\n\n//   useFrame(() => ref.current && (ref.current.rotation.y += 0.01));\n\n//   return <primitive ref={ref} object={scene} />;\n// }\n\nconst useSkybox = (paths) => {\n  const { scene } = useThree();\n\n  useEffect(() => {\n    const loader = new THREE.CubeTextureLoader();\n    const mat = loader.load(paths);\n    scene.background = mat;\n    scene.environment = mat;\n  }, [paths, scene.background, scene]);\n\n  return null;\n};\n\nexport function Scene() {\n  useSkybox(imagePaths);\n\n  return (\n    <>\n      {/* <ambientLight />\n      <pointLight ref={light} args={[2, 2, 2]} /> */}\n      {/* <Text fontSize={1}>spaceyboi</Text> */}\n      {/* <Dodecahedron args={[10]}> */}\n        {/* <meshPhysicalMaterial\n          color=\"white\"\n          metalness={0.99}\n          roughness={0.012}\n          transparency={0.5}\n          refractionRatio={0.82}\n          transparent\n          side={DoubleSide}\n        /> */}\n      {/* </Dodecahedron> */}\n      {/* <Planet /> */}\n    </>\n  );\n}\n\nexport function SkyBoxApp() {\n  return (\n    <Canvas style={{ background: \"black\" }}>\n      <Suspense fallback={null}>\n        <Scene />\n        {/* <Effects /> */}\n      </Suspense>\n    </Canvas>\n  );\n}\n","\n\nexport function random(min, max) {\n return   Math.random() * (max - min) + min\n}\n\nexport function randomInt(min, max) {\n    return random(min, max).floor();\n}\n\nexport function randomVec3(min, max) { \n    return [random(-1, 1), random(-1, 1), random(-1, 1)];\n}","// import Box from './components/Box';\nimport { Physics } from \"@react-three/cannon\";\nimport { Stats } from \"@react-three/drei\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { Suspense } from \"react\";\nimport { RecoilRoot } from \"recoil\";\nimport CubePhysical from \"../components/CubePhysical\";\nimport Plane from \"../components/Plane/Plane\";\nimport PlayerModel from \"../components/PlayerModel/PlayerModel\";\nimport { Scene as SkyBoxcene } from \"../components/SkyBox/SkyBox\";\nimport { PUBLIC_ENV_URL } from \"../config\";\nimport { random } from \"../utils/getRandom\";\nimport \"./Scene1.css\";\n\n// socket.on(\"connect\", (msg) => {\n//   socket.emit(\"message-client\", `연결됨.`);\n//   console.log(\"connected\", msg);\n//   socket.emit(\"name\", \"Tom\");\n// });\n// socket.on(\"seq-num\", (msg) => {\n//   // setCounter(msg)\n//   console.info(msg)\n// });\n// socket.on(\"message\", (msg) => {\n//   // addMessage(msg);\n//   console.info(msg);\n// });\n// return socket.emit('end');\n\nfunction MainScene() {\n  // useFrame(({clock}) => {\n  //   // console.log('orbitRef.current.target.position', clock,orbitRef.current.target.position)\n  //   orbitRef.current.target.postiion = new Vector3(7*Math.sin(clock.elapsedTime), 7, 7*Math.cos(clock.elapsedTime))\n  //   orbitRef.current.update();\n  // })\n\n  return (\n    <>\n      <ambientLight intensity={0.2} color=\"#FAAD37\" />\n      <directionalLight position={[70, 100, 0]} color=\"#FAAD37\" intensity={1} />\n      {/* <Box position={[1,1,1]} /> */}\n\n      {/* <pointLight position={[0, 10, 0]} color=\"red\" intensity={11} /> */}\n      {/* <SpotLight position={[0, 2, 2]} color=\"red\" intensity={11} castShadow angle={0.5} decay={1} distance={20} penumbra={1}/> */}\n      {/* <pointLight position={[-70, 80, -20]} color=\"red\" intensity={0.1} /> */}\n      {/* todo: use camera of recoil and update its target position, use lookat ? or worldDrirection ? and compute its direction */}\n      {/* <OrbitControls ref={orbitRef} minDistance={1} maxDistance={20} target={[0,2.5,0]}/> */}\n      {/* <PointerLockControls ref={orbitRef} minDistance={1} maxDistance={20} target={[0,2.5,0]}/> */}\n      <SkyBoxcene />\n      <Suspense fallback={null}>\n        <Plane />\n        {new Array(15).fill(0).map((ji) => {\n          return (\n            <CubePhysical\n              position={[random(-4, 4), random(1, 10), random(-4, 4)]}\n              scale={[0.1, 0.1, 0.15]}\n              rotation={[random(0.1, 25), 0, 0]}\n            />\n          );\n        })}\n        <PlayerModel\n          path={process.env.PUBLIC_URL + \"assets/marie_survivor/scene.gltf\"}\n          walkIndex={15}\n          idleIndex={0}\n        />\n        {/* <PlayerSimpleModel path={process.env.PUBLIC_URL + \"assets/marie_survivor/scene.gltf\"} /> */}\n      </Suspense>\n    </>\n  );\n}\n\nfunction Scene1() {\n  return (\n    <>\n      <Canvas camera={{ position: [7, 7, 7] }}>\n        <RecoilRoot>\n          <Physics>\n            <MainScene />\n          </Physics>\n          <Stats />\n        </RecoilRoot>\n      </Canvas>\n    </>\n  );\n}\n\nexport default Scene1;\n","// import SocketClient from \"../components/SocketClient\";\n\nfunction Scene2() { \n  return (\n    <>\n    {/* <SocketClient/> */}\n    </>\n  );\n}\n\nexport default Scene2;\n","// import Box from './components/Box';\nimport { useState } from \"react\";\nimport Scene1 from \"./Scenes/Scene1\";\nimport Scene2 from \"./Scenes/Scene2\";\n\nfunction App() {\n  const [mode, setMode] = useState(0)\n  return (\n    <div style={{width:'100%', height:'100%'}}>\n      {\n        mode === 1 ?\n          <Scene1 /> :\n        mode === 2 ?\n          <Scene2 /> :\n          (<><button onClick={() => setMode(1)}>\n            시작하기1\n          </button><button onClick={() => setMode(2)}>\n            시작하기2\n          </button></>)\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}